#define INF 0x3f3f3f
const int maxnum = 1000;

double  edge[maxnum][maxnum];
double  mincost[maxnum];
bool visited[maxnum];
int vnum;
double prime()
{
	for (int i = 0; i < vnum; i++)
	{
		mincost[i] = INF;
		visited[i] = 0;
	}
	mincost[0] = 0;
	double  res = 0;
	while (true)
	{
		int v = -1;
		for (int i = 0; i < vnum; i++)
		{
			if (!visited[i] && (v == -1 || mincost[i] < mincost[v]))
				v = i;
		}
		if (v == -1)
			break;
		visited[v] = 1;
		res += mincost[v];
		for (int i = 0; i < vnum; i++)
		{
			mincost[i] = min(mincost[i], edge[v][i]);
		}
	}
	return res;
}
//可用优先队列优化mincost[].....真香

//计算两点间的距离
double dis(int  x1, int  y1, int  x2, int y2)
{
	int x = x1 - x2;
	int  y = y1 - y2;
	return sqrt(x*x*1.0 + y*y*1.0);
}
